#Makayla's Plan for Demultiplexing
## 1. Define the problem
We have 4 fastq files that are the raw data that have resulted from the library prep (in this case, one performed by the 2017 BGMP cohort). The 4 fastq files include the reads and barcodes (indexes). Reads 1 and 4 contain the insert reads while reads 2 and 3 contain the barcondes for those reads respectively, though read 3 contains the reverse compliment of those barcodes. 

In this plan, I need to de-multiplex the data, meaning that I need to go through the 4 files to find if the forward barcodes and the reverse barcodes match per read. For those that match, thpse are considered  "dual matched". For those that do not match, they must have "hopped". For barcodes that do not match any of our existing barcodes, (those with "N"/undetermined nucleotides), those are "unknown. 

## 2. Describe output
There are 24 barcodes (indexes) for our data. Those are all listed in the indexes.txt file. We have 2 reads, forward and reverse. For each index, there will be 2 files for all of the reads that were successfully dual matched between the 2 reads. For example, all reads from read 1 with index B1 that were successfully matched with their corresponding read 2 barcode for B1 will be put into one file. Maybe this file can be called B1_R1.fq. Therefore, their corresponding reads from the read 2 file (which is our R4 file), will be in another file maybe called something like B1_R2.fq.

We will do this again for all "hopped" indexed reads; an example would be the 4th record of the read 1 and 2 files have a B1 index for read 1, but a A11 index for R2. These will be stored in files maybe named unmatched_R1.fastq and unmatched_R2.fastq, regardless of their indexes, as these will be added to the headers for each record as they go into the file. This will be repeated again for all unknown files...

All unknown files are going to be reads where one or both of the indexes are not within our list of known read indexes OR the quality of the read is below the threshold. These will go out to only 2 files for each read: unknown_R1.fastq and unknown_R2.fastq. The quality threshold can be better determined once we have graphed the quality distribution of all 4 files.

3. Upload your [4 input FASTQ files](../TEST-input_FASTQ) and your [>=6 expected output FASTQ files](../TEST-output_FASTQ).

Done!

## 4. Pseudocode
    1. Open all 4 fastq files for each of the 4 runs
    2. Go through the 4 files record by record
        3. Check if the record is considered "unknown"
            Do the indexes NOT match those that are in our expected list of indexes?
            Is the quality NOT above the established threshold?
                Mark this record's status as "unknown" and skip the rest of the checks to put it into the designated "unknown" files.
        4. Check if the record is considered "matched" or "hopped"
            Do the indexes match?
                Yes! - then mark this record's status as "matched" and skip the rest of the checks to put it into the designated "matched" files.
                No! - then mark this record's status as "hopped" and skip the rest of the checks to put it into the designated "hopped" files.
    5. Grab the 4 lines of read 1 and the 4 lines of read 2.
    6. Based on their marked status, append the appropriate file with that record
        For example, for matched records, open 2 files for this index to store the read 1 match and read 2 match.
                    for the hopped records, open 2 files for ALL hopped records to store read 1 and read 2.
                    for the unknown records, open 2 files for ALL unmatched records to store read 1 and read 2.
        When these records are being added, the indexes for read 1 and read 2 will be added to the end of each header line.
        

5. High level functions. For each function, be sure to include:
    1. Description/doc string
    2. Function headers (name and parameters)
    3. Test examples for individual functions
    4. Return statement